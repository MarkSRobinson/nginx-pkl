//amends "PklProject"
module io.markrobinson.nginx

import "@k8s/K8sObject.pkl"
import "@k8s/api/apps/v1/Deployment.pkl"
import "@k8s/api/core/v1/ConfigMap.pkl"
import "@k8s/api/core/v1/Service.pkl"
import "@k8s/api/core/v1/ServiceAccount.pkl"
import "@k8s/api/networking/v1/Ingress.pkl"

import "version.pkl"
import "chart.pkl" as InternalChart

selectorLabels {
  ["app.kubernetes.io/name"] = "nginx"
  ["app.kubernetes.io/instance"] = version.name
}

image {
  repository = "krewh/hardened-nginx"
  tag = "1.1.3"
}

commonLabels  {
  ["app.kubernetes.io/version"] = version.version
  ["app.kubernetes.io/managed-by"] = "Helm"
}

ingressEnabled = false

/// Creates an empty mapping from resource name to resource [type] that defaults `metadata.name` to the resource name.
function resourceMapping(type): Mapping<String, unknown> =
  new Mapping { default = (key) -> (type) {
      metadata {
        name = key
        labels {
          for (k,v in module.commonLabels) {
            [k] = v
          }
          for (k,v in module.selectorLabels) {
            [k] = v
          }
        }
      } } }

output {
    renderer = new YamlRenderer {
      isStream = true
      converters = (K8sObject.output.renderer as YamlRenderer).converters
    }

  // Only emit Mappings
  value = chart.toMap().values.filter( (x) -> (x is Mapping)).flatMap((it) -> it.toMap().values)
}

hidden config: Mixin<Config>

/// The actual configuration value
chart: Config = includes.fold(new Config {
  configMaps = resourceMapping(ConfigMap)
  deployments = resourceMapping(Deployment)
  ingresses = resourceMapping(Ingress)
  services = resourceMapping(Service)
  serviceaccounts = resourceMapping(ServiceAccount)
}, (result, cfg) -> cfg.config.apply(result))

/// The underlying configuration
class Config {
  services: Mapping<String, Service> //= resourceMapping(Service)
  configMaps: Mapping<String, ConfigMap> //= resourceMapping(ConfigMap)
  deployments: Mapping<String, Deployment> //= resourceMapping(Deployment)
  ingresses: Mapping<String, Ingress> //= resourceMapping(Deployment)
  serviceaccounts: Mapping<String, ServiceAccount> //= resourceMapping(Deployment)
}

local includes: Listing<InternalChart> = new {
  import("service.pkl")
  import("configmap.pkl")
  import("deployment.pkl")
  when (ingressEnabled) { import("ingress.pkl") }
  import("serviceaccount.pkl")
}
